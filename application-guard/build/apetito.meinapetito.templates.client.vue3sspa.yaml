# Search and replace application-guard with the name of your app!

resources:
  repositories:
    - repository: self
      trigger:
        batch: 'true'
        branches:
          include:
            - main
        paths:
          include:
            - applications/application-guard

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: apetito.meinapetito

  - name: containerRegistry
    value: 'apetitoebusinesssolutions'
  - name: containerRegistryUrl
    value: '$(containerRegistry).azurecr.io'
  - name: imageRepository
    value: 'meinapetito-apps-application-guard'
  - name: sourcesDirectory
    value: '$(Build.SourcesDirectory)/applications/application-guard'
  - name: dockerfilePath
    value: '$(sourcesDirectory)/Dockerfile'
  - name: dockerBuildContext
    value: '$(sourcesDirectory)'
  - name: tag
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      value: $(Build.BuildId)
    ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      value: 'development'
  - name: tags
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      value: |
        $(Build.BuildId)
        latest
    ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      value: 'development'

stages:
  - stage: Build
    displayName: Build and push the docker image
    jobs:
      - job: BuildAndPublishDockerImage
        displayName: Build and push docker image
        condition: ne(variables['Build.Reason'], 'PullRequest')
        steps:
          - task: Docker@2
            displayName: Build application-guard docker image
            inputs:
              command: 'build'
              containerRegistry: '$(containerRegistry)'
              repository: '$(imageRepository)'
              dockerfile: '$(dockerfilePath)'
              buildContext: '$(dockerBuildContext)'
              tags: '$(tags)'
              arguments: '--build-arg PAT=$(PAT)'
              addPipelineData: false

          - task: Docker@2
            displayName: Push application-guard docker image to apetitoeBusinessSolutions ACR
            inputs:
              command: 'push'
              containerRegistry: '$(containerRegistry)'
              repository: '$(imageRepository)'
              tags: '$(tags)'

          - task: PublishPipelineArtifact@1
            displayName: Publish the raw kubernetes manifests to the pipeline
            inputs:
              targetPath: '$(sourcesDirectory)/kubernetes'
              artifact: 'Manifests'
              publishLocation: 'pipeline'

      - job: Build_Docker_Image_For_Pull_Request
        displayName: Build Docker Image For Pull Request
        condition: eq(variables['Build.Reason'], 'PullRequest')
        steps:
          - task: Docker@2
            displayName: Build application-guard docker image
            inputs:
              command: 'build'
              containerRegistry: '$(containerRegistry)'
              repository: '$(imageRepository)'
              dockerfile: '$(dockerfilePath)'
              buildContext: '$(dockerBuildContext)'
              tags: '$(tags)'
              arguments: '--build-arg PAT=$(PAT)'
              addPipelineData: false

  - stage: Staging
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: Deploy the application-guard to the staging cluster
    jobs:
      - deployment: DeployToStaging
        environment: stage-meinapetito.default
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  name: bake
                  inputs:
                    action: 'bake'
                    renderType: 'kustomize'
                    kustomizationPath: '$(Pipeline.Workspace)/Manifests/overlays/staging/'

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes Cluster
                  inputs:
                    action: 'deploy'

                    manifests: |
                      $(bake.manifestsBundle)

                    containers: |
                      $(containerRegistryUrl)/$(imageRepository):$(tag)

  - stage: Production
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: Deploy the application-guard to the production cluster
    jobs:
      - deployment: DeployToProduction
        environment: prod-meinapetito.default
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  name: bake
                  inputs:
                    action: 'bake'
                    renderType: 'kustomize'
                    kustomizationPath: '$(Pipeline.Workspace)/Manifests/overlays/prod/'

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes Cluster
                  inputs:
                    action: 'deploy'

                    manifests: |
                      $(bake.manifestsBundle)

                    containers: |
                      $(containerRegistryUrl)/$(imageRepository):$(tag)
